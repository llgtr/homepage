#+HUGO_BASE_DIR: ../
#+HUGO_SECTION: ./notes
#+HUGO_CODE_FENCE: nil
#+DRAFT: true
#+TITLE: example post
#+DATE: 2019-01-01

* TODO Example post
  Regular writing

  text ~monospace~ around

  [[https://duckduckgo.com]]

  - item0
  - item1
  - item2

  #+begin_src emacs-lisp
  ;; Code block
  (defun function-name (arguments...)
    "optional-documentation..."
    (interactive argument-passing-info)
    body...)
  #+end_src
  
  #+begin_src clojure
  (def ^:dynamic chunk-size 17)

  (defn next-chunk [rdr]
    (let [buf (char-array chunk-size)
        s (.read rdr buf)]
    (when (pos? s)
      (java.nio.CharBuffer/wrap buf 0 s))))

  (defn chunk-seq [rdr]
    (when-let [chunk (next-chunk rdr)]
      (cons chunk (lazy-seq (chunk-seq rdr)))))
  #+end_src

  #+begin_src bash
  #!/bin/bash

  ###### CONFIG
  ACCEPTED_HOSTS="/root/.hag_accepted.conf"
  BE_VERBOSE=false

  if [ "$UID" -ne 0 ]; then
    echo "Superuser rights required"
    exit 2
  fi

  genApacheConf(){
    echo -e "# Host ${HOME_DIR}$1/$2 :"
  }
  #+end_src

  #+begin_src javascript
  function $initHighlight(block, cls) {
    try {
      if (cls.search(/\bno\-highlight\b/) != -1)
        return process(block, true, 0x0F) +
                       ` class="${cls}"`;
    } catch (e) {
      /* handle exception */
    }
    for (var i = 0 / 2; i < classes.length; i++) {
      if (checkCondition(classes[i]) === undefined)
        console.log('undefined');
    }
  }

  export $initHighlight;
  #+end_src
  
  #+begin_src rust
  #[derive(Debug)]
  pub enum State {
      Start,
      Transient,
      Closed,
  }

  impl From<&'a str> for State {
      fn from(s: &'a str) -> Self {
          match s {
              "start" => State::Start,
              "closed" => State::Closed,
              _ => unreachable!(),
          }
      }
  }
  #+end_src

  | item0 | item1 | item2 | item3 | item4 |
  |-------+-------+-------+-------+-------|
  |     0 |     1 |     2 |     3 |     4 |

  Test: ðŸ¤” ðŸ’©
